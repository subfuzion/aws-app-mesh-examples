---
Parameters:
  Prefix:
    Type: String
    Description: Prefix name that joins all the stacks

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
      
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for the instances"
      VpcId:
        Fn::ImportValue: !Sub '${Prefix}-vpc:VPC'
      SecurityGroupIngress:
      - CidrIp:
          Fn::ImportValue: !Sub '${Prefix}-vpc:VpcCIDR'
        IpProtocol: -1
        
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${Prefix}-log-group'
      RetentionInDays: 5

  TaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess

  TaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub '${Prefix}-mesh.local'
      Vpc:
        Fn::ImportValue:
          !Sub "${Prefix}-vpc:VPC"

  ColorTellerServiceRegistry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: 'colorteller'
      DnsConfig:
        NamespaceId: !GetAtt 'CloudMapNamespace.Id'
        DnsRecords:
          - Type: A
            TTL: 10
      HealthCheckCustomConfig:
        FailureThreshold: 10

  ColorGatewayServiceRegistry:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: 'colorgateway'
      DnsConfig:
        NamespaceId: !GetAtt 'CloudMapNamespace.Id'
        DnsRecords:
          - Type: A
            TTL: 10
      HealthCheckCustomConfig:
        FailureThreshold: 10

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Access to the public facing load balancer'
      VpcId:
        Fn::ImportValue:
          !Sub "${Prefix}-vpc:VPC"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
      - Fn::ImportValue:
          !Sub '${Prefix}-vpc:PublicSubnet1'
      - Fn::ImportValue:
          !Sub '${Prefix}-vpc:PublicSubnet2'
      SecurityGroups:
      - !Ref PublicLoadBalancerSecurityGroup

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/ping'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub '${Prefix}-webtarget'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
      VpcId:
        Fn::ImportValue:
          !Sub "${Prefix}-vpc:VPC"
  
  PublicLoadBalancerListener:
    DependsOn:
    - PublicLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref WebTargetGroup
        Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  WebLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref WebTargetGroup
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values:
        - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  ColorGatewayTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - 'FARGATE'
      Family: 'colorgateway'
      NetworkMode: 'awsvpc'
      Cpu: 512
      Memory: 1024
      TaskRoleArn: !Ref TaskIamRole
      ExecutionRoleArn: !Ref TaskExecutionIamRole
      ContainerDefinitions:
      - Name: 'app'
        Image: subfuzion/colorgateway:v3
        Essential: true
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '${Prefix}-log-group'
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: 'colorgateway'
        PortMappings:
        - ContainerPort: 9080
          Protocol: 'tcp'
        Environment:
        - Name: "SERVER_PORT"
          Value: "9080"
        - Name: "COLOR_TELLER_ENDPOINT"
          Value: !Sub "colorteller.${Prefix}-mesh.local:9080"
        - Name: "TCP_ECHO_ENDPOINT"
          Value: ""
        - Name: "STAGE"
          Value: ""

  BlueColorTellerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - 'FARGATE'
      Family: 'blue'
      NetworkMode: 'awsvpc'
      Cpu: 512
      Memory: 1024
      TaskRoleArn: !Ref TaskIamRole
      ExecutionRoleArn: !Ref TaskExecutionIamRole
      ContainerDefinitions:
      - Name: 'app'
        Image: subfuzion/colorteller
        Essential: true
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub ${Prefix}-log-group
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: 'blue'
        PortMappings:
        - ContainerPort: 9080
          Protocol: 'tcp'
        Environment:
        - Name: "COLOR"
          Value: "blue"
        - Name: "SERVER_PORT"
          Value: "9080"
        - Name: "STAGE"
          Value: ""

  ColorGatewayService:
    Type: AWS::ECS::Service
    DependsOn:
    - WebLoadBalancerRule
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: 'FARGATE'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'ColorGatewayServiceRegistry.Arn'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref SecurityGroup
          Subnets: 
          - Fn::ImportValue:
              !Sub '${Prefix}-vpc:PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${Prefix}-vpc:PrivateSubnet2'
      TaskDefinition: !Ref ColorGatewayTaskDefinition
      LoadBalancers:
      - ContainerName: app
        ContainerPort: 9080
        TargetGroupArn: !Ref WebTargetGroup

  BlueColorTellerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: 'FARGATE'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'ColorTellerServiceRegistry.Arn'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref SecurityGroup
          Subnets: 
          - Fn::ImportValue:
              !Sub '${Prefix}-vpc:PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${Prefix}-vpc:PrivateSubnet2'
      TaskDefinition: !Ref BlueColorTellerTaskDefinition

Outputs:
  ColorGatewayEndpoint:
    Description: 'Public endpoint for Color Gateway service'
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Sub '${Prefix}:ColorGatewayEndpoint'

  TaskExecutionIamRole:
    Description: 'TaskExecutionIamRole'
    Value: !Ref TaskExecutionIamRole
    Export:
      Name: !Sub '${Prefix}:TaskExecutionIamRole'

  TaskIamRole:
    Description: 'TaskIamRole'
    Value: !Ref TaskIamRole
    Export:
      Name: !Sub '${Prefix}:TaskIamRole'

  ColorTellerServiceRegistryArn:
    Description: 'ColorTellerServiceRegistryArn'
    Value: !GetAtt ColorTellerServiceRegistry.Arn
    Export:
      Name: !Sub '${Prefix}:ColorTellerServiceRegistryArn'

  Cluster:
    Description: 'Cluster'
    Value: !Ref Cluster
    Export:
      Name: !Sub '${Prefix}:Cluster'

  SecurityGroup:
    Description: 'SecurityGroup'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${Prefix}:SecurityGroup'
